// Test generated by RoostGPT for test Test28Sept using AI Type Open AI and AI Model gpt-4

const express = require("express");
const CustomerModel = require("../models/customer");
const request = require("supertest");
const app = express();

app.delete("/:id", async (req, res) => {
  try {
    var id = req.params.id;
    const customer = await CustomerModel.findById(id);
    const data = await customer.remove();
    res.json(data);
  } catch (error) {
    console.log("error: ", error);
    res.status(!200).send(error);
  }
});

describe("DELETE /:id", () => {
  beforeAll(() => {
    // Mock the CustomerModel.findById method
    CustomerModel.findById = jest.fn();
  });

  afterEach(() => {
    // Clear all mocks after each test
    jest.clearAllMocks();
  });

  test("should delete the customer with the given id", async () => {
    const id = "123";
    const customer = { _id: id, name: "Test customer", email: "test@test.com" };

    // Mock the findById and remove methods
    CustomerModel.findById.mockResolvedValue(customer);
    customer.remove = jest.fn().mockResolvedValue(customer);

    const response = await request(app).delete(`/${id}`);

    expect(response.status).toBe(200);
    expect(response.body).toEqual(customer);
    expect(CustomerModel.findById).toHaveBeenCalledWith(id);
    expect(customer.remove).toHaveBeenCalled();
  });

  test("should return a 500 error if something goes wrong", async () => {
    const id = "123";

    // Mock the findById method to throw an error
    CustomerModel.findById.mockRejectedValue(new Error("Test error"));

    const response = await request(app).delete(`/${id}`);

    expect(response.status).toBe(500);
    expect(response.text).toBe("Test error");
    expect(CustomerModel.findById).toHaveBeenCalledWith(id);
  });
});
