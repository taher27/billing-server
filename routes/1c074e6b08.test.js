// Test generated by RoostGPT for test Test28Sept using AI Type Open AI and AI Model gpt-4

const express = require("express");
const CustomerModel = jest.genMockFromModule("../models/customer");
const request = require('supertest');
const app = express();

// Mocking CustomerModel
jest.mock('../models/customer');

describe('POST /', () => {
  beforeEach(() => {
    CustomerModel.mockClear();
  });

  it('should save a customer successfully', async () => {
    CustomerModel.mockImplementation(() => {
      return {
        save: () => Promise.resolve({ cname: 'Test Customer', address: 'Test Address', phone: 'Test Phone', vat: 'Test VAT', pobox: 'Test PO Box', region: 'Test Region' }),
      };
    });

    const response = await request(app)
      .post('/')
      .send({ cname: 'Test Customer', address: 'Test Address', phone: 'Test Phone', vat: 'Test VAT', pobox: 'Test PO Box', region: 'Test Region' });

    expect(response.statusCode).toBe(200);
    expect(response.body).toEqual({ cname: 'Test Customer', address: 'Test Address', phone: 'Test Phone', vat: 'Test VAT', pobox: 'Test PO Box', region: 'Test Region' });
  });

  it('should return an error if saving customer fails', async () => {
    CustomerModel.mockImplementation(() => {
      return {
        save: () => Promise.reject('Error saving customer'),
      };
    });

    const response = await request(app)
      .post('/')
      .send({ cname: 'Test Customer', address: 'Test Address', phone: 'Test Phone', vat: 'Test VAT', pobox: 'Test PO Box', region: 'Test Region' });

    expect(response.statusCode).toBe(500);
    expect(response.text).toBe('error: Error saving customer');
  });
});
